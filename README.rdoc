= salesforce_bulk

==Overview

Salesforce Bulk is a simple Ruby gem for connecting to and using the Salesforce Bulk API[http://www.salesforce.com/us/developer/docs/api_asynch/index.htm].

==Installation

Install SalesforceBulk from RubyGems:

  gem install salesforce_bulk

Or include it in your project's *Gemfile* with Bundler:

  gem 'salesforce_bulk'

==Contribute

To contribute, fork this repo, create a topic branch, make changes, then send a pull request. Pull requests without accompanying tests will *not* be accepted. To run tests in your fork, just do:

  bundle install
  rake

==Configuration/Initialization

=== Basic Configuration

  require 'salesforce_bulk'
  client = SalesforceBulk::Client.new(username: 'MyUsername', password: 'MyPassword', token: 'MySecurityToken')
  client.authenticate

Optional keys include host (defaults to "login.salesforce.com"), version (defaults to 24.0) and debugging (defaults to false).

=== Configuring from a YAML file

If you initialize by passing only the name of a YAML file the contents will be to read to configure the Client object. The optional keys mentioned in the Basic Configuration section can also be used here.

  ---
  username: MyUsername
  password: MyPassword
  token: MySecurityToken

Then in a Ruby script:

  require 'salesforce_bulk'
  client = SalesforceBulk::Client.new("config/salesforce_bulk.yml")
  client.authenticate







Sample operations:

  # Insert/Create
  new_account = Hash["name" => "Test Account", "type" => "Other"] # Add as many fields per record as needed.
  records_to_insert = Array.new
  records_to_insert.push(new_account) # You can add as many records as you want here, just keep in mind that Salesforce has governor limits.
  result = salesforce.create("Account", records_to_insert)
  puts "result is: #{result.inspect}"

  # Update
  updated_account = Hash["name" => "Test Account -- Updated", id => "a00A0001009zA2m"] # Nearly identical to an insert, but we need to pass the salesforce id.
  records_to_update = Array.new
  records_to_update.push(updated_account)
  salesforce.update("Account", records_to_update)

  # Upsert
  upserted_account = Hash["name" => "Test Account -- Upserted", "External_Field_Name" => "123456"] # Fields to be updated. External field must be included
  records_to_upsert = Array.new
  records_to_upsert.push(upserted_account)
  salesforce.upsert("Account", records_to_upsert, "External_Field_Name") # Note that upsert accepts an extra parameter for the external field name

  # Delete
  deleted_account = Hash["id" => "a00A0001009zA2m"] # We only specify the id of the records to delete
  records_to_delete = Array.new
  records_to_delete.push(deleted_account)
  salesforce.delete("Account", records_to_delete)

  # Query
  res = salesforce.query("Account", "select id, name, createddate from Account limit 3") # We just need to pass the sobject name and the query string

==TODO
This is a rough early version of the gem. Immediate plans include better error reporting as there currently is none.

== Copyright

Copyright (c) 2011 Jorge Valdivia.

===end

